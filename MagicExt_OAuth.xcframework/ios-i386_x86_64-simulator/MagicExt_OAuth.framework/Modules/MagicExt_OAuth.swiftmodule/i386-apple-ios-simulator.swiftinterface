// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MagicExt_OAuth
import AuthenticationServices
import CryptoSwift
import Foundation
@_exported import MagicExt_OAuth
import MagicSDK
import MagicSDK_Web3
import PromiseKit
import Rollbar
import SafariServices
import Swift
public struct OAuthConfiguration : MagicSDK.BaseConfiguration {
  public var provider: MagicExt_OAuth.OAuthProvider
  public var redirectURI: Swift.String
  public var scope: [Swift.String]?
  public var loginHint: Swift.String?
  public init(provider: MagicExt_OAuth.OAuthProvider, redirectURI: Swift.String, scope: [Swift.String]? = nil, loginHint: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum OAuthProvider : Swift.String, Swift.CaseIterable, Swift.Codable {
  case GOOGLE
  case FACEBOOK
  case GITHUB
  case APPLE
  case LINKEDIN
  case BITBUCKET
  case GITLAB
  case TWITTER
  case DISCORD
  public init?(rawValue: Swift.String)
  public typealias AllCases = [MagicExt_OAuth.OAuthProvider]
  public typealias RawValue = Swift.String
  public static var allCases: [MagicExt_OAuth.OAuthProvider] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class OAuthExtension : MagicSDK.BaseModule {
  public enum OAuthExtensionError : Swift.Error {
    case parseSuccessURLError(url: Swift.String)
    case unsupportedVersions
    case userDeniedAccess(Swift.Error)
    case unableToStartPopup
  }
  public func loginWithPopup(_ configuration: MagicExt_OAuth.OAuthConfiguration) -> PromiseKit.Promise<MagicExt_OAuth.OAuthResponse>
  public func loginWithPopup(_ configuration: MagicExt_OAuth.OAuthConfiguration, response: @escaping MagicSDK.Web3ResponseCompletion<MagicExt_OAuth.OAuthResponse>)
  override public init(rpcProvider: MagicSDK.RpcProvider)
  @objc deinit
}
extension Magic {
  public var oauth: MagicExt_OAuth.OAuthExtension {
    get
  }
}
extension Web3Response {
  public var magicExtOAuthError: MagicExt_OAuth.OAuthExtension.OAuthExtensionError? {
    get
  }
}
public struct OAuthRedirectError : MagicSDK.MagicResponse {
  public let provider: MagicExt_OAuth.OAuthProvider.RawValue
  public let error: Swift.String
  public let error_description: Swift.String
  public let error_uri: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OAuthResponse : MagicSDK.MagicResponse {
  public let oauth: MagicExt_OAuth.OauthPartialResult
  public let magic: MagicExt_OAuth.MagicPartialResult
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OauthPartialResult : Swift.Codable {
  public let provider: Swift.String
  public let scope: [Swift.String]
  public let accessToken: Swift.String
  public let userHandle: Swift.String
  public let userInfo: MagicExt_OAuth.OpenIDConnectProfile
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MagicPartialResult : Swift.Codable {
  public let idToken: Swift.String
  public let userMetadata: MagicSDK.UserMetadata
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OpenIDConnectProfile : Swift.Codable {
  public let name: Swift.String?
  public let familyName: Swift.String?
  public let givenName: Swift.String?
  public let middleName: Swift.String?
  public let nickname: Swift.String?
  public let preferredUsername: Swift.String?
  public let profile: Swift.String?
  public let picture: Swift.String?
  public let website: Swift.String?
  public let gender: Swift.String?
  public let birthdate: Swift.String?
  public let zoneinfo: Swift.String?
  public let locale: Swift.String?
  public let updatedAt: Swift.Int?
  public let email: Swift.String?
  public let emailVerified: Swift.Bool?
  public let phoneNumber: Swift.String?
  public let phoneNumberVerified: Swift.Bool?
  public let address: MagicExt_OAuth.OpenIDConnectProfile.OIDAddress?
  public struct OIDAddress : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MagicExt_OAuth.OAuthProvider : Swift.Equatable {}
extension MagicExt_OAuth.OAuthProvider : Swift.Hashable {}
extension MagicExt_OAuth.OAuthProvider : Swift.RawRepresentable {}
